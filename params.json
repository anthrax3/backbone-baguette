{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Backbone Baguette\r\n\r\n\r\nThe baguette's components are availables under the **Backbone.Baguette** namespace;\r\n\r\n# CompositeView\r\n\r\nA CompositeView is a view that is a kind of hybrid view able to render a collection or a model following a **template** with a very few number of arguments. It avoids the redundant templating and collection looping code and allows us to write less code.\r\n\r\nJust like Backbone Views, you can (and you must!) inherit from a CompositeView to be able to use all its power.\r\n\r\n```javascript\r\nvar MyViewClass = Backbone.Baguette.CompositeView.extend({\r\n   // properties goes here\r\n});\r\n\r\n// Classic instantiation of the view\r\nvar myView = new MyViewClass();\r\n\r\n```\r\n\r\n\r\n### Examples\r\n\r\nNothing better than a good set of examples to understand better how Baguette can help you do regular view related stuff in a quicker way.\r\n\r\n###### Examples data\r\n\r\nAll the following examples will use the following models and collection : \r\n\r\n```javascript\r\n\r\n// Basic models and collection\r\nvar Car = Backbone.Model.extend({});\r\nvar toyota = new Car({brand:\"Toyota\",name:\"Yaris\"});\r\nvar bmw = new Car({brand:\"BMW\",name:\"M3\"});\r\n\r\nvar Garage = Backbone.Collection.extend({});\r\nvar myGarage = new Garage([toyota,bmw]);\r\n```\r\n###### Rendering a collection\r\n\r\nYou can use a Composite View to **render a collection** and avoid to write the redundant *this.collection.each(....)* code.\r\n\r\nTo achieve this you can define the **modelView** parameter which is either a Backbone.View (or a Baguette CompositeView obviously) definition (not an instance!) or either a parameter object which can contain the traditional Backbone Views parameters to create an el, such as **tagName**, **className**, etc...\r\n\r\n*If you use the second option, Baguette will create \"anonymous\" views inside the render function for you. Therefore you won't be able to define custom attributes on theses views, are they will be originals Baguette CompositeView objects.*\r\n\r\n**Creating a Collection View using a parameter object**\r\n\r\n```javascript\r\nvar GarageView = Backbone.Baguette.CompositeView.extend({\r\n  tagName:\"ul\",\r\n  tpl:\"I have a {{brand}} {{name}} in my garage\",\r\n\r\n  modelView:{\r\n   tagName:\"li\"\r\n  }  \r\n\r\n});\r\n\r\nvar myGarageView = new GarageView({collection:myGarage});\r\n// Render the view => all the subsequent model views are created!\r\nmyGarageView.render();\r\n```\r\n\r\n**Creating a Collection View using a View definition**\r\n\r\nThis will achieve the same thing as above, but I can create a custom view to define events and so. This is the recommended approach when Views are more complex. If your views are only used to \"display\" data, the above option may be preffered.\r\n\r\n```javascript\r\nvar CarView = Backbone.Baguette.CompositeView.extend({\r\n   tpl:\"I have a {{brand}} {{name}} in my garage\",\r\n   events:{\r\n     \"click\":\"onClick\"\r\n   },\r\n   onClick:function() {\r\n    console.log(this.model.toJSON());\r\n   }\r\n});\r\n\r\nvar GarageView = Backbone.Baguette.CompositeView.extend({\r\n  tagName:\"ul\",\r\n  tpl:\"I have a {{brand}} {{name}} in my garage\",\r\n  modelView:CarView\r\n\r\n});\r\nvar myGarageView = new GarageView({collection:myGarage});\r\n// Render the view => all the subsequent model views are created!\r\nmyGarageView.render();\r\n```\r\n\r\n*Your model views are passed all the options you gave to your GarageView instance; except the options related to the DOM such as tagName, etc...*\r\n\r\n# Global Configuration","google":"","name":"Backbone-baguette","tagline":"Freshly toasted backbone library. Provides tools and helpers for a super quick backbone development in smalls to mediums applications."}