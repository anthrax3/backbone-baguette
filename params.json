{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Backbone-baguette","google":"","tagline":"Freshly toasted backbone library. Provides tools and helpers for a super quick backbone development in smalls to mediums applications.","body":"# Backbone Baguette\r\n\r\n\r\nThe baguette's components are availables under the **Backbone.Baguette** namespace;\r\n\r\n# CompositeView\r\n\r\nA CompositeView is a view that is a kind of hybrid view able to render a collection or a model following a **template** with a very few number of arguments. It avoids the redundant templating and collection looping code and allows us to write less code.\r\n\r\nJust like Backbone Views, you can (and you must!) inherit from a CompositeView to be able to use all its power.\r\n\r\n```javascript\r\nvar MyViewClass = Backbone.Baguette.CompositeView.extend({\r\n   // properties goes here\r\n});\r\n\r\n// Classic instantiation of the view\r\nvar myView = new MyViewClass();\r\n\r\n```\r\n\r\nThe attributes of a CompositeView are :\r\n\r\n###### views (Object)\r\n\r\nThe **views** properties \r\n\r\n```javascript\r\nviews : { \r\n     \r\n    '#Selector':ViewClass,\r\n\r\n     // We can also give additional parameters for a better rendering flow control\r\n     // The value used here are the default values for a CompositeView\r\n    '.Selector':{\r\n        class:ViewClass, // mandatory, the View which will be instantiated\r\n        setElement:true, \r\n        render:true\r\n     }\r\n\r\n\r\n}\r\n\r\n```\r\n\r\n###### tpl (String)\r\n```javascript\r\n\r\ntpl : \"My awesome car is a {{brand}} {{name}}\"\r\n\r\n```\r\n\r\n### Example\r\n\r\n```javascript\r\n\r\n// Basic models and collection\r\nvar Car = Backbone.Model.extend({});\r\n\r\nvar toyota = new Car({brand:\"Toyota\",name:\"Yaris\"});\r\nvar bmw = new Car({brand:\"BMW\",name:\"M3\"});\r\n\r\nvar Garage = Backbone.Collection.extend({});\r\n\r\nvar myGarage = new Garage([toyota,bmw]);\r\n\r\nvar GarageView = Backbone.Baguette.CompositeView.extend({\r\n  tagName:\"ul\",\r\n  tpl:\"I have a {{brand}} {{name}} in my garage\",\r\n\r\n  modelView:{\r\n   tagName:\"li\"\r\n  }  \r\n\r\n});\r\n\r\nvar myGarageView = new GarageView({collection:myGarage});\r\n// Render the view => all the subsequent model views are created!\r\nmyGarageView.render();\r\n\r\n\r\n```\r\n\r\n# Global Configuration"}